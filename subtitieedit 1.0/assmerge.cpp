#include "assmerge.h"
#include <qfile.h>
#include <qdebug.h>
#include <qtextcodec.h>

int assmerge::getcnlines(QString file, int option)
{
    int lines=0;
    QFile *fp = new QFile(file);
    fp->open(QIODevice::ReadOnly|QIODevice::Text);
    QTextStream in(fp);
    in.setCodec(QTextCodec::codecForName("Utf-8") );
    fp->seek(0);
    while(!in.atEnd())
    {
        switch (option)
        {
            case 0:     //纯中文翻译
            {
                QString temp = in.readLine(); //读一行是一行
                qDebug() << temp;
                lines++;
                if(temp == NULL) return lines;
                break;
            }
            case 3:     //获取含台词srt行数
            {
                QString temp = in.readLine(); //序号
                in.readLine(); //时间区间
                in.readLine(); //台词（因为修正过，所以必只有一行）
                in.readLine(); //空行
                if(temp == NULL) return lines;
                lines++;
                break;
            }
            case 4: //获取空时间轴srt字幕
            {
                QString temp = in.readLine(); //序号
                in.readLine(); //时间区间
                in.readLine(); //空行
                if(temp == NULL) return lines;
                lines++;
                break;
            }
            default:
            {
                QString temp = in.readLine();
                in.readLine();
                if(temp == NULL) return lines;
                lines++;
                break;
            }
        }
    }
    fp->close();
    return lines;
}

int assmerge::outputass(QString infile1,QString infile2, QString outfile,QString cncode, QString encode, int option)
{
    QFile *fpin1 = new QFile(infile1);
    QFile *fpin2 = new QFile(infile2);
    QFile *fpout = new QFile(outfile);
    fpin1->open(QIODevice::ReadOnly|QIODevice::Text);
    fpin2->open(QIODevice::ReadOnly|QIODevice::Text);
    fpout->open(QIODevice::WriteOnly|QIODevice::Text);
    QTextStream txtin1(fpin1);
    fpin1->seek(0);
    QTextStream txtin2(fpin2);
    fpin2->seek(0);
    QTextStream txtout(fpout);
    txtout.setCodec(QTextCodec::codecForName("Utf-8"));
    txtin2.setCodec(QTextCodec::codecForName("Utf-8"));
    txtout << "[Script Info]"<< endl;
    txtout << "; This ass is generated by Billy Goodman's subtitle tool, version 1.0, codename: novice_555"   << endl;
    txtout << "; https://zhwikizmz.cn"   << endl;
    txtout << "Title: BG auto generated file"   << endl;
    txtout << "ScriptType: v4.00+"   << endl;
    txtout << "PlayResX: 1920"   << endl;
    txtout << "PlayResY: 1080"   << endl;
    txtout << "ScaledBorderAndShadow: yes"   << endl << endl;
    txtout << "[BG Padding Information]"   << endl;
    txtout << "Hello, motherfucker~"   << endl;
    txtout << "I'll evolve into a powerful, versatile tool one day~"   << endl << endl;
    txtout << "[V4+ Styles]"   << endl;
    txtout << "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding"   << endl;
    txtout << "Style: Default,Arial,13,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.33333,1.33333,2,7,7,7,1"   << endl << endl;
    txtout << "[Events]" << endl;
    txtout << "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text" << endl;
    QString Start,End,line;
    while(!txtin1.atEnd())
    {
        txtout << "Dialogue: 0,"; //ass必备
        txtin1.readLine();//跳过序列号
        line=txtin1.readLine();//读取时间轴
        Start=line.mid(1,10); //起始时间
        End = line.mid(18,10); //终止时间
        Start.replace(",",".");
        End.replace(",",".");
        qDebug()<<Start;
        qDebug()<<End;
        txtout << Start << "," << End << ",";
        txtout << "Default,,0,0,0,,";
        switch (option)
        {
            case 0:
            {
                txtout << cncode << txtin2.readLine() << "\\N" << encode << txtin1.readLine() << endl;
                break;
            }
            case 1:
            {
                txtout << cncode << txtin2.readLine() << "\\N" << encode << txtin1.readLine() << endl;
                txtin2.readLine();
                break;
            }
            case 2:
            {
                txtin2.readLine();
                txtout << cncode << txtin2.readLine() << "\\N" << encode << txtin1.readLine() << endl;
                break;
            }
            case 3:
            {
                txtout << cncode << txtin2.readLine() << endl;
                break;
            }
            default:
            {
                qDebug() << "???";
                break;
            }
        }
        txtin1.readLine();//跳过空行
    }
    fpin1->close();
    fpin2->close();
    fpout->close();
    return 0;
}
